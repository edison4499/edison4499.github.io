[{"title":"js闭包的理解","date":"2019-11-29T07:00:23.000Z","path":"2019/11/29/js闭包理解/","text":"形成闭包: 函数里面套函数，内部的函数被保存到了外部，形成闭包 特点： 内部函数可以引用外部函数的参数和变量 参数和变量不会被垃圾回收机制回收 缺点： 常驻内存增加内存使用量 使用不当很容易造成内存泄露 优点： 避免全局变量的污染1var a = 123;2var get = (function()&#123;3 var a = 345;4 function getAo()&#123;5 console.log(a)6 &#125;7 return function()&#123;8 getAo()9 &#125;10&#125;())11get() 实现私有变量1function Person(name)&#123;2 // 定义一个私有变量 这里的意思是私房钱3 var privateMoney = 20000;4 this.name = name;5 this.getPrivate = function()&#123;6 this.ownMoney = privateMoney7 &#125;8 this.changePrivate = function(target)&#123;9 privateMoney = target+privateMoney;10 &#125;11&#125;12let chris = new Person('Chris')13// 看看自己有多少私房钱14chris.getPrivate()15console.log(chris.ownMoney)// 这里之所以可以看到是因为用到了闭包16// 此时可以继续存储私房钱 17chris.changePrivate(40000);18chris.getPrivate()19console.log(chris.ownMoney) // 此时私房钱就变成了6000020// 但是我们直接去访问chris.privateMoney 是访问不到的21console.log(chris,privateMoney)// 此时会报错 实现私有变量 他自己可以内部用但是我们外部访问不到 可以保存一个变量长期储存在内存中1function fn()&#123;2 var arr = [];3 for(var i= 0;i&lt;=9;i++)&#123;4 arr[j] = function()&#123;5 console.log(j)6 &#125;7 &#125;8 return arr;9&#125;10var resArr = fn();11resArr[1]() // 10 12resArr[2]() // 10","comments":true,"tags":[]}]
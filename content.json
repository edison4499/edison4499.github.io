[{"title":"js闭包的理解","date":"2019-11-29T07:00:23.000Z","path":"2019/11/29/js闭包理解/","text":"形成闭包: 函数里面套函数，内部的函数被保存到了外部，形成闭包 特点： 内部函数可以引用外部函数的参数和变量 参数和变量不会被垃圾回收机制回收 缺点： 常驻内存增加内存使用量 使用不当很容易造成内存泄露 优点： 避免全局变量的污染var a = 123; var get = (function(){ var a = 345; function getAo(){ console.log(a) } return function(){ getAo() } }()) get() 实现私有变量实例如下： function Person(name){ // 定义一个私有变量 这里的意思是私房钱 var privateMoney = 20000; this.name = name; this.getPrivate = function(){ this.ownMoney = privateMoney } this.changePrivate = function(target){ privateMoney = target+privateMoney; } } let chris = new Person(&apos;Chris&apos;) // 看看自己有多少私房钱 chris.getPrivate() console.log(chris.ownMoney)// 这里之所以可以看到是因为用到了闭包 // 此时可以继续存储私房钱 chris.changePrivate(40000); chris.getPrivate() console.log(chris.ownMoney) // 此时私房钱就变成了60000 // 但是我们直接去访问chris.privateMoney 是访问不到的 console.log(chris,privateMoney)// 此时会报错 实现私有变量 他自己可以内部用但是我们外部访问不到 可以保存一个变量长期储存在内存中function fn(){ var arr = []; for(var i= 0;i&lt;=9;i++){ arr[j] = function(){ console.log(j) } } return arr; } var resArr = fn(); resArr[1]() // 10 resArr[2]() // 10","comments":true,"tags":[]}]